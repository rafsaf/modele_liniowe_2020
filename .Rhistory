B <- c(3, 3, 3, 3, 3, rep(0, 945))
eps <- rnorm(n)
Y <- X%*%B+eps
n <- 1000
X <- matrix(rnorm(950000, 0, 0.1), n, 950)
B <- c(3, 3, 3, 3, 3, rep(0, 945))
eps <- rnorm(n)
Y <- X%*%B+eps
sub <- c(1, 2, 5, 10, 50, 100, 500, 950)
residuals_vec <- rep(NA, 8)
aic_vec <- rep(NA, 8)
mse_vec <- rep(NA, 8)
pvalues_matrix <- matrix(data = NA, 8, 2)
il_false <- rep(0, 8)
for(i in 1:8){
reg <- lm(Y~X[, 1:sub[i]])
residuals_vec[i] <- sum(reg$residuals^2)
aic_vec[i] <- AIC(reg)
M <- X[, 1:sub[i]]
v <- matrix(reg$coefficients[-1]-B[1:sub[i]], sub[i], 1)
mse_vec[i] <- sum((M%*%v)^2)/(n-sub[i]+1)
if(i == 1)
pvalues_matrix[1, 1] <- summary(reg)$coefficients[2, 4]
else{
pvalues_matrix[i, 1] <- summary(reg)$coefficients[2, 4]
pvalues_matrix[i, 2] <- summary(reg)$coefficients[3, 4]
}
if(i != 1)
il_false[i] <- sum(summary(reg)$coefficients[2:min(sub[i], 6), 4]>0.05)
if(i >= 4)
il_false[i] <- sum(summary(reg)$coefficients[7:(sub[i]+1), 4]<0.05) + il_false[i]
}
mse_vec
## [1] 3.391774e-04 1.285289e-03 6.189528e-03 7.493332e-03 5.806933e-02
## [6] 1.106140e-01 1.061844e+00 1.995250e+01
il_false
## [1] 0 0 0 0 1 4 28 14
residuals_vec
## [1] 1434.69869 1318.22517 1057.50831 1056.24645 1008.50606 964.07375 531.86130
## [8] 60.95778
aic_vec
## [1] 3204.832 3122.163 2907.793 2916.599 2950.347 3005.290 3210.505 1944.303
pvalues_matrix
mse_vec
## [1] 3.391774e-04 1.285289e-03 6.189528e-03 7.493332e-03 5.806933e-02
## [6] 1.106140e-01 1.061844e+00 1.995250e+01
il_false
sub
mse_vec
## [1] 3.391774e-04 1.285289e-03 6.189528e-03 7.493332e-03 5.806933e-02
## [6] 1.106140e-01 1.061844e+00 1.995250e+01
il_false
## [1] 0 0 0 0 1 4 28 14
residuals_vec
## [1] 1434.69869 1318.22517 1057.50831 1056.24645 1008.50606 964.07375 531.86130
## [8] 60.95778
aic_vec
## [1] 3204.832 3122.163 2907.793 2916.599 2950.347 3005.290 3210.505 1944.303
pvalues_matrix
# value of AIC criterion
aic_vec
reg950 <- lm(Y~X)
cf_vec <- c(rep(TRUE, 5), rep(FALSE, 945))
X2 <- rbind(X, cf_vec)
ordered_coefficients <- order(abs(reg950$coefficients[-1]), decreasing = TRUE)
X2 <- X2[, ordered_coefficients]
sub <- c(1, 2, 5, 10, 50, 100, 500, 950)
residuals_vec <- rep(NA, 8)
aic_vec <- rep(NA, 8)
mse_vec <- rep(NA, 8)
pvalues_matrix <- matrix(data = NA, 8, 2)
il_false <- rep(0, 8)
for(i in 1:8){
reg <- lm(Y~X2[1:1000, 1:sub[i]])
residuals_vec[i] <- sum(reg$residuals^2)
aic_vec[i] <- AIC(reg)
M <- X[, 1:sub[i]]
v <- matrix(reg$coefficients[-1]-B[1:sub[i]], sub[i], 1)
mse_vec[i] <- sum((M%*%v)^2)/(n - sub[i]+1)
if(i == 1)
pvalues_matrix[1, 1] <- summary(reg)$coefficients[2, 4]
else{
pvalues_matrix[i, 1] <- summary(reg)$coefficients[2, 4]
pvalues_matrix[i, 2] <- summary(reg)$coefficients[3, 4]
}
if(i == 1)
il_false[i] <- sum(summary(reg)$coefficients[2, 4]>0.05)
else{
a <- which(X2[1001, 1:sub[i]] == 1)
b <- which(X2[1001, 1:sub[i]] == 0)
il_false[i] <- sum(summary(reg)$coefficients[2:(sub[i]+1), 4][a]>0.05)+il_false[i]
il_false[i] <- sum(summary(reg)$coefficients[2:(sub[i]+1), 4][b]<0.05)+il_false[i]
}
}
# numbers
sub
# mse vectors
mse_vec
# the number of false discoveries
how_many_false
reg950 <- lm(Y~X)
cf_vec <- c(rep(TRUE, 5), rep(FALSE, 945))
X2 <- rbind(X, cf_vec)
ordered_coefficients <- order(abs(reg950$coefficients[-1]), decreasing = TRUE)
X2 <- X2[, ordered_coefficients]
reg950 <- lm(Y~X)
cf_vec <- c(rep(TRUE, 5), rep(FALSE, 945))
X2 <- rbind(X, cf_vec)
ordered_coefficients <- order(abs(reg950$coefficients[-1]), decreasing = TRUE)
X2 <- X2[, ordered_coefficients]
sub <- c(1, 2, 5, 10, 50, 100, 500, 950)
residuals_vec <- rep(NA, 8)
aic_vec <- rep(NA, 8)
mse_vec <- rep(NA, 8)
pvalues_matrix <- matrix(data = NA, 8, 2)
how_many_false <- rep(0, 8)
for(i in 1:8){
reg <- lm(Y~X2[1:1000, 1:sub[i]])
residuals_vec[i] <- sum(reg$residuals^2)
aic_vec[i] <- AIC(reg)
M <- X[, 1:sub[i]]
v <- matrix(reg$coefficients[-1]-B[1:sub[i]], sub[i], 1)
mse_vec[i] <- sum((M%*%v)^2)/(n - sub[i]+1)
if(i == 1)
pvalues_matrix[1, 1] <- summary(reg)$coefficients[2, 4]
else{
pvalues_matrix[i, 1] <- summary(reg)$coefficients[2, 4]
pvalues_matrix[i, 2] <- summary(reg)$coefficients[3, 4]
}
if(i == 1)
how_many_false[i] <- sum(summary(reg)$coefficients[2, 4]>0.05)
else{
a <- which(X2[1001, 1:sub[i]] == 1)
b <- which(X2[1001, 1:sub[i]] == 0)
how_many_false[i] <- sum(summary(reg)$coefficients[2:(sub[i]+1), 4][a]>0.05)+how_many_false[i]
how_many_false[i] <- sum(summary(reg)$coefficients[2:(sub[i]+1), 4][b]<0.05)+how_many_false[i]
}
}
# numbers
sub
# mse vectors
mse_vec
# the number of false discoveries
how_many_false
# residual sum of squares
residuals_vec
# value of AIC criterion
aic_vec
# p-values
pvalues_matrix
dt1<-read.table('CH06PR15.txt', col.names=c("age", "severity_of_illnes", "anxiety_level"))
dt1<-read.table('CH06PR15.txt', col.names=c("age", "severity_of_illnes", "anxiety_level", "satisfaction"))
View(dt1)
dt1<-read.table('CH06PR15.txt', col.names=c("age", "severity_of_illnes", "anxiety_level", "satisfaction"))
reg <- lm(satisfaction~age+severity_of_illnes+anxiety_level, dt1)
summ_reg <- summary(reg)
summ_reg
confint(req)[2:4,]
dt1<-read.table('CH06PR15.txt', col.names=c("age", "severity_of_illnes", "anxiety_level", "satisfaction"))
reg <- lm(satisfaction~age+severity_of_illnes+anxiety_level, dt1)
summ_reg <- summary(reg)
summ_reg
confint(req)[2:4,]
confint(req)
confint(summ_reg)
reg1 <- lm(satisfaction~age+severity_of_illnes+anxiety_level, dt1)
summ_reg <- summary(reg)
summ_reg
confint(reg1)
confint(reg1)[2:,]
confint(reg1)[2:4,]
confint(reg1, level = 0.95)[2:4,]
confint(reg1, level = 0.95)
anova(reg1)
confint(reg1, level = 0.95)
anova(reg1)
reg1 <- lm(satisfaction~age+severity_of_illnes+anxiety_level, dt1)
reg2 <- lm(satisfaction~age, dt1)
reg3 <- lm(satisfaction~severity_of_illnes, dt1)
reg4 <- lm(satisfaction~anxiety_level, dt1)
anova(reg1, reg2)
anova(reg2, reg1)
1, reg2
anova(reg1, reg2)
anova(reg2, reg1)
reg1 <- lm(satisfaction~age+severity_of_illnes+anxiety_level, dt1)
reg2 <- lm(satisfaction~1, dt1)
reg3 <- lm(satisfaction~age, dt1)
reg4 <- lm(satisfaction~severity_of_illnes, dt1)
reg5 <- lm(satisfaction~anxiety_level, dt1)
summ_reg <- summary(reg)
summ_reg
confint(reg1, level = 0.95)
anova(reg2, reg1)
anova(reg1)
dt1 <- as.data.table(dt1)
dt1 <- as.data.table(dt1)
dt1 <- as.data.table(dt1)
setnames(dt1,
old = c("age", "severity_of_illnes", "anxiety_level", "satisfaction"),
new = new_labels)
res <- reg$residuals
pred <- predict(reg)
long_dt1 <- melt(dt1,measure.vars = new_labels)
dt1 <- as.data.table(dt1)
library(data.table)
library(ggplot2)
library(mvtnorm)
library(MASS)
library(mixtools)
n = 100
Sigma = matrix(c(1,0.9,0.9,1),2,2)
X = mvrnorm(n,c(0,0),0.01*Sigma)
# anwser a):
Y = 3*X[,1]+rnorm(n,0,1)
#Model reduced
reg1 <- lm(Y~X[, 1], x = TRUE)
#Model full
reg2 <- lm(Y~X[, 1]+X[, 2], x = TRUE)
int1 <- confint(reg1, 2)
# interval 1
int1
tc1 <- qt(0.975, n-2)
stat_t1 <- summary(reg1)$coefficients[2, 3]
stat_t1 > tc1
int2 <- confint(reg2, 2)
# interval 2
int2
tc2 <- qt(0.975, n-3)
stat_t2 <- summary(reg2)$coefficients[2, 3]
stat_t2 > tc2
modelred <- reg1$x
modelfull <- reg2$x
s2_red <- sum(reg1$residuals^2)/(n-2)
s2_full <- sum(reg2$residuals^2)/(n-3)
s_red_beta1 <- sqrt(s2_red*(solve(t(modelred)%*%modelred))[2, 2])
s_red_beta1
# the standard deviations of the estimate of b1 reduced model
s_full_beta1 <- sqrt(s2_full*(solve(t(modelfull)%*%modelfull))[2, 2])
s_full_beta1
# the power of the test
calculate_prob1 <- function(delta){pt(tc,df,delta)}
calculate_prob2 <- function(delta){pt(-tc,df,delta)}
alpha <- 0.05
df <- n-2
tc <- qt(1-alpha/2,df)
beta1 <- 3
delta <- beta1/s_red_beta1
(power_red <- 1-calculate_prob1(delta)+calculate_prob2(delta))
# reduced model power of identification of X1
alpha <- 0.05
df <- n-3
tc <- qt(1-alpha/2,df)
beta1 <- 3
delta <- beta1/s_full_beta1
(power_full <- 1-calculate_prob1(delta)+calculate_prob2(delta))
x1 <- 0
x2 <- 0
a <- 1:1000
b <- 1:1000
for(i in 1:1000){
(eps <- rnorm(n, 0, 1))
(Y <- 3*X[, 1] + eps)
reg1 <- lm(Y~X[, 1])
reg2 <- lm(Y~X[, 1]+X[, 2])
interval1 <- confint(reg1)[2, ]
interval2 <- confint(reg2)[2, ]
if(0>=interval1[1] && 0<=interval1[2])
x1 <- x1+1
if(0>=interval2[1] && 0<=interval2[2])
x2 <- x2+1
a[i] <- reg1$coefficients[2]
b[i] <- reg2$coefficients[2]
}
power_red_exp <- 1-x1/1000
power_red_exp
power_full_exp <- 1-x2/1000
power_full_exp
n <- 1000
X <- matrix(rnorm(950000, 0, 0.1), n, 950)
B <- c(3, 3, 3, 3, 3, rep(0, 945))
eps <- rnorm(n)
Y <- X%*%B+eps
sub <- c(1, 2, 5, 10, 50, 100, 500, 950)
residuals_vec <- rep(NA, 8)
aic_vec <- rep(NA, 8)
mse_vec <- rep(NA, 8)
pvalues_matrix <- matrix(data = NA, 8, 2)
how_many_false <- rep(0, 8)
for(i in 1:8){
reg <- lm(Y~X[, 1:sub[i]])
residuals_vec[i] <- sum(reg$residuals^2)
aic_vec[i] <- AIC(reg)
M <- X[, 1:sub[i]]
v <- matrix(reg$coefficients[-1]-B[1:sub[i]], sub[i], 1)
mse_vec[i] <- sum((M%*%v)^2)/(n-sub[i]+1)
if(i == 1)
pvalues_matrix[1, 1] <- summary(reg)$coefficients[2, 4]
else{
pvalues_matrix[i, 1] <- summary(reg)$coefficients[2, 4]
pvalues_matrix[i, 2] <- summary(reg)$coefficients[3, 4]
}
if(i != 1)
how_many_false[i] <- sum(summary(reg)$coefficients[2:min(sub[i], 6), 4]>0.05)
if(i >= 4)
how_many_false[i] <- sum(summary(reg)$coefficients[7:(sub[i]+1), 4]<0.05) + how_many_false[i]
}
# numbers
sub
# mse vectors
mse_vec
# the number of false discoveries
how_many_false
# residual sum of squares
residuals_vec
# value of AIC criterion
aic_vec
# p-values
pvalues_matrix
reg950 <- lm(Y~X)
cf_vec <- c(rep(TRUE, 5), rep(FALSE, 945))
X2 <- rbind(X, cf_vec)
ordered_coefficients <- order(abs(reg950$coefficients[-1]), decreasing = TRUE)
X2 <- X2[, ordered_coefficients]
sub <- c(1, 2, 5, 10, 50, 100, 500, 950)
residuals_vec <- rep(NA, 8)
aic_vec <- rep(NA, 8)
mse_vec <- rep(NA, 8)
pvalues_matrix <- matrix(data = NA, 8, 2)
how_many_false <- rep(0, 8)
for(i in 1:8){
reg <- lm(Y~X2[1:1000, 1:sub[i]])
residuals_vec[i] <- sum(reg$residuals^2)
aic_vec[i] <- AIC(reg)
M <- X[, 1:sub[i]]
v <- matrix(reg$coefficients[-1]-B[1:sub[i]], sub[i], 1)
mse_vec[i] <- sum((M%*%v)^2)/(n - sub[i]+1)
if(i == 1)
pvalues_matrix[1, 1] <- summary(reg)$coefficients[2, 4]
else{
pvalues_matrix[i, 1] <- summary(reg)$coefficients[2, 4]
pvalues_matrix[i, 2] <- summary(reg)$coefficients[3, 4]
}
if(i == 1)
how_many_false[i] <- sum(summary(reg)$coefficients[2, 4]>0.05)
else{
a <- which(X2[1001, 1:sub[i]] == 1)
b <- which(X2[1001, 1:sub[i]] == 0)
how_many_false[i] <- sum(summary(reg)$coefficients[2:(sub[i]+1), 4][a]>0.05)+how_many_false[i]
how_many_false[i] <- sum(summary(reg)$coefficients[2:(sub[i]+1), 4][b]<0.05)+how_many_false[i]
}
}
# numbers
sub
# mse vectors
mse_vec
# the number of false discoveries
how_many_false
# residual sum of squares
residuals_vec
# value of AIC criterion
aic_vec
# p-values
pvalues_matrix
dt1<-read.table('CH06PR15.txt', col.names=c("age", "severity_of_illnes", "anxiety_level", "satisfaction"))
reg1 <- lm(satisfaction~age+severity_of_illnes+anxiety_level, dt1)
summ_reg <- summary(reg)
summ_reg
## zad 6
confint(reg1, level = 0.95)
# H0 are b1=0, b2=0,b3=0
anova(reg1)
dt1 <- as.data.table(dt1)
new_labels <- c("Age", "Severity of illnes", "Anxiety level", "Satisfaction")
setnames(dt1,
old = c("age", "severity_of_illnes", "anxiety_level", "satisfaction"),
new = new_labels)
res <- reg$residuals
pred <- predict(reg)
long_dt1 <- melt(dt1,measure.vars = new_labels)
long_dt1_res <- long_dt1
long_dt1_res[, residua := rep(res, 4)]
dt1<-read.table('CH06PR15.txt', col.names=c("age", "severity_of_illnes", "anxiety_level", "satisfaction"))
reg1 <- lm(satisfaction~age+severity_of_illnes+anxiety_level, dt1)
summ_reg <- summary(reg)
summ_reg
## zad 6
confint(reg1, level = 0.95)
# H0 are b1=0, b2=0,b3=0
anova(reg1)
## zad 7
res <- reg$residuals
## zad 7
res <- reg1$residuals
plot(res, reg1$age)
plot(res, dt1$age)
plot(dt1$age, res)
plot(dt1$severity_of_illnes res)
plot(dt1$severity_of_illnes, res)
plot(dt1$anxiety_level, res)
plot(dt1$satisfaction, res)
plot(pred, res)
pred <- predict(reg)
plot(pred, res)
pred <- predict(reg)
pred <- predict(reg1)
plot(pred, res)
## zad 8
stat_norm <- shapiro.test(res)
stat_norm
qqplot(pred, res)
qqline()
("car")
# H0 are b1=0, b2=0,b3=0
require("car")
# H0 are b1=0, b2=0,b3=0
require("CAR")
# H0 are b1=0, b2=0,b3=0
require("car")
Anova(reg1)   #suma typu II
qqplot(pred, res)
qqplot(res)
qqplot(res, res)
qqplot(res)
qqnorm(res)
dt2<-read.table('csdata.dat', col.names=c("id", "GPA", "HSM", "HSS", "HSE", "SATM", "SATV", "SEX"))
dt2<-read.table('csdata.txt', col.names=c("id", "GPA", "HSM", "HSS", "HSE", "SATM", "SATV", "SEX"))
View(dt2)
reg1 <- lm(GPA~HSM+HSS+HSE, dt2)
reg1 <- lm(GPA~SATM+SATV+HSM+HSS+HSE, dt2)
reg1 <- lm(GPA~HSM+HSS+HSE, dt2)
reg2 <- lm(GPA~SATM+SATV+HSM+HSS+HSE, dt2)
summ_reg <- summary(reg1)
summ_reg
anova(reg1)
anova(reg2)
an1 <- anova(reg1)
sum(an1$`Sum Sq`)
sum(an1$`Sum Sq`)[1:5]
sum(an1$`Sum Sq`)[1:5,]
sum(an1$`Sum Sq`)[1:2]
sum(an1$`Sum Sq`)[,1:5]
sum(an1$`Sum Sq`)[1:5]
sum(an1$`Sum Sq`)
an1$`Sum Sq`
an1$`Sum Sq`[1:5]
an1$`Sum Sq`[1:4]
an1$`Sum Sq`[1:3]
sum(an1$`Sum Sq`[1:3])
an2 <- anova(reg2)
sum(an2$`Sum Sq`[1:5])
sse2 <- sum(an2$`Sum Sq`[1:5])
sse1 <- sum(an1$`Sum Sq`[1:3])
sse2-sse1
diffrence <- sse2-sse1
an2
summ_reg <- summary(reg1)
summ_reg
Ft <- (diffrence / 2) / (sse1 / 220))
Ft <- (diffrence / 2) / (sse1 / 220)
Ft
Ft <- (diffrence / 3) / (sse1 / 220)
Ft
Ft <- (diffrence / 218) / (sse1 / 220)
Ft
Ft <- (diffrence / 2) / (sse1 / 5)
Ft
Ft <- (diffrence / 2) / (sse1 / 6)
Ft
Ft <- (diffrence / 2) / (sse1 / 5)
Ft
Ft <- (diffrence / 2) / (sse2 / 5)
Ft
Ft <- (diffrence / 2) / (sse2 / 6)
Ft
Ft <- (diffrence / 2) / (sse1 / 220)
Ft
reg1 <- lm(GPA~HSM+HSS+HSE, dt2)
reg2 <- lm(GPA~SATM+SATV+HSM+HSS+HSE, dt2)
summ_reg <- summary(reg1)
summ_reg
an1 <- anova(reg1)
sse1 <- sum(an1$`Sum Sq`[1:3])
an2 <- anova(reg2)
sse2 <- sum(an2$`Sum Sq`[1:5])
diffrence <- sse2-sse1
Ft <- (diffrence / 2) / (sse1 / 220)
Ft
diffrence <- sse2-sse1
diffrence
diffrence / 2
diffrence / 2 / 0.9503
sse1/2
Ft <- (diffrence / 2) / (107.750 / 220)
Ft
Ft <- (diffrence / 2) / (106.819 / 218)
Ft
Ft <- ft()
Ft <- qf()
Ft <- qf(F_test, 2, 218)
F_test <- (diffrence / 2) / (106.819 / 218)
F_test
Ft <- qf(F_test, 2, 218)
Ft
F_test > Ft
anova(reg1, reg2)
anova(reg1, reg2)
# high p-value 0.3882 suggest that we should not reject H0 hypothesis
reg1 <- lm(GPA~SATM+SATV+HSM+HSE+HSS, dt2)
require("car")
install.packages(c("boot", "class", "digest", "foreign", "glue", "htmltools", "jsonlite", "KernSmooth", "knitr", "magrittr", "MASS", "nnet", "Rcpp", "rmarkdown", "spatial", "stringi", "tibble", "tinytex", "xfun"))
require("car")
